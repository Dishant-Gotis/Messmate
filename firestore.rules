rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'dishantgotisdg9881@gmail.com' && request.auth.token.email_verified == true;
    }

    // Validate mess document structure
    function validateMess(data) {
      return data.keys().hasAll(['name','type','pricePerMeal','rating','todaysMenu','address','coordinates','phone']) &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        data.type in ['veg','non-veg','both'] &&
        data.pricePerMeal is number && data.pricePerMeal >= 0 && data.pricePerMeal <= 10000 &&
        data.rating is number && data.rating >= 1 && data.rating <= 5 &&
        data.todaysMenu is list && data.todaysMenu.size() <= 50 &&
        data.address is string && data.address.size() > 0 && data.address.size() <= 300 &&
        data.coordinates is map &&
        data.coordinates.lat is number && data.coordinates.lat >= -90 && data.coordinates.lat <= 90 &&
        data.coordinates.lng is number && data.coordinates.lng >= -180 && data.coordinates.lng <= 180 &&
        data.phone is string && data.phone.size() >= 10 && data.phone.size() <= 20;
    }

    // Validate student document structure
    function validateStudent(data) {
      return data.keys().hasAll(['id','name','email','phone','status']) &&
        data.id == request.auth.uid &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        data.email is string && data.email == request.auth.token.email &&
        data.phone is string && data.phone.size() >= 10 && data.phone.size() <= 20 &&
        (!('address' in data) || (data.address is string && data.address.size() <= 300)) &&
        data.status in ['active','inactive'];
    }

    // Only allow student to change allowed fields; status changes require admin
    function validateStudentUpdate(old, data) {
      return validateStudent(data) && data.status == old.status;
    }

    // Public: anyone can read messes; only admin can write
    match /messes/{messId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() && validateMess(request.resource.data);
    }

    // Students: user can read their own doc; admin can read all
    match /students/{studentId} {
      allow read: if isAdmin() || ( isSignedIn() && request.auth.uid == studentId );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.id && validateStudent(request.resource.data);
      allow update: if isAdmin() || ( isSignedIn() && request.auth.uid == studentId && validateStudentUpdate(resource.data, request.resource.data) );
      allow delete: if isAdmin();
    }

    // Default deny for anything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
